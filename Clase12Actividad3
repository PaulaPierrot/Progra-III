import java.util.ArrayList;
import java.util.LinkedList;


public class Grafo {
   ArrayList<Almacen> almacenes = new ArrayList<>();


   // Constructor
   public Grafo(ArrayList<Almacen> almacenes) {
       this.almacenes = almacenes;
   }


   public void agregarAlmacen(Almacen almacen) {
       almacenes.add(almacen);
   }


   private Almacen obtenerAlmacenPorId(int id) {
       for (Almacen almacen : almacenes) {
           if (almacen.getId() == id) {
               return almacen;
           }
       }
       return null;
   }


   // Implementación de BFS
   public void BFS(int inicio) {
       boolean[] visitado = new boolean[this.almacenes.size()]; // Array de visitados
       LinkedList<Integer> cola = new LinkedList<>(); // Cola para BFS


       visitado[inicio] = true; // Marcar el nodo de inicio como visitado
       cola.add(inicio); // Añadirlo a la cola


       while (!cola.isEmpty()) {
           inicio = cola.poll(); // Extraer el primer nodo de la cola
           System.out.print(inicio + " "); // Procesar el nodo


           // Obtener todos los nodos adyacentes de "inicio"
           Almacen almacenActual = obtenerAlmacenPorId(inicio);
           if (almacenActual != null) {
               for (Integer destino : almacenActual.getDestinos()) {
                   if (!visitado[destino]) {
                       visitado[destino] = true;
                       cola.add(destino);
                   }
               }
           }
       }
   }


   // Método auxiliar de DFS que se llama recursivamente
   private void DFSUtil(int v, boolean[] visitado) {
       // Marcar el vértice actual como visitado y mostrarlo
       visitado[v] = true;
       System.out.print(v + " ");


       Almacen almacenActual = this.obtenerAlmacenPorId(v);
       // Recorrer todos los vértices adyacentes al vértice actual
       if (almacenActual != null) {
           for (Integer destino : almacenActual.getDestinos()) {
               if (!visitado[destino]) {
                   DFSUtil(destino, visitado);
               }
           }
       }
   }


   // Método principal DFS que llama a DFSUtil
   public void DFS(int inicio) {
       // Array de booleanos para marcar los vértices visitados
       boolean[] visitado = new boolean[this.almacenes.size()];


       // Llamar al método recursivo DFSUtil comenzando desde el vértice "inicio"
       DFSUtil(inicio, visitado);
   }


   // Clase interna Almacen
   public class Almacen {
       private int id;
       private String nombre;
       private ArrayList<Integer> destinos = new ArrayList<>();


       public Almacen(int id, String nombre) {
           this.id = id;
           this.nombre = nombre;
       }


       public void agregarDestino(Integer destino) {
           destinos.add(destino);
       }


       public ArrayList<Integer> getDestinos() {
           return destinos;
       }


       public int getId() {
           return id;
       }


       public String getNombre() {
           return nombre;
       }


       @Override
       public String toString() {
           return nombre;
       }
   }


   // Método main para ejecutar el ejemplo
   public static void main(String[] args) {


       // Crear almacenes
       Grafo grafo = new Grafo(new ArrayList<>());
       Almacen almacen1 = grafo.new Almacen(0, "Almacen A");
       Almacen almacen2 = grafo.new Almacen(1, "Almacen B");
       Almacen almacen3 = grafo.new Almacen(2, "Almacen C");
       Almacen almacen4 = grafo.new Almacen(3, "Almacen D");


       // Definir los destinos de cada almacen
       almacen1.agregarDestino(1); // Almacen A -> Almacen B
       almacen1.agregarDestino(2); // Almacen A -> Almacen C
       almacen2.agregarDestino(3); // Almacen B -> Almacen D
       almacen3.agregarDestino(3); // Almacen C -> Almacen D


       // Crear la lista de almacenes y el grafo
       grafo.agregarAlmacen(almacen1);
       grafo.agregarAlmacen(almacen2);
       grafo.agregarAlmacen(almacen3);
       grafo.agregarAlmacen(almacen4);


       // Ejecutar BFS y DFS desde el nodo de inicio 0 (Almacen A)
       System.out.println("Recorrido BFS comenzando desde Almacen A:");
       grafo.BFS(0);


       System.out.println("\n\nRecorrido DFS comenzando desde Almacen A:");
       grafo.DFS(0);
   }
}
